/*package com.veterinaria.modelo;

// Aqu√≠ importar√≠as librer√≠as (DAOs) de todos los m√≥dulos:
// import com.veterinaria.modelo.TurnoDAO3;
// import com.veterinaria.modelo.PacienteDAO;

public class FactoriaServicios {

    // ‚úÖ Gestores (Modelos) inicializados una sola vez
    private final GestorTurno3 gestorTurno;
    private final GestorGestionTurnos gestorGestionTurnos; // Ejemplo de otro m√≥dulo

    public FactoriaServicios() {
        // --- 1. Inicializaci√≥n del M√≥dulo Turnos ---
        TurnoDAO3 turnoDAO = new TurnoDAO3(); // Uso de librer√≠a/DAO
        this.gestorTurno = new GestorTurno3(turnoDAO);
        this.gestorGestionTurnos=new GestorGestionTurnos(turnoDAO);

    }

    // M√©todos p√∫blicos para acceder a los gestores:

    public GestorTurno3 getGestorTurno() {
        return gestorTurno;
    }

    public GestorGestionTurnos getGestorGestionTurnos() {
        return gestorGestionTurnos;
    }
}*/

/*
package com.veterinaria.modelo;


import com.veterinaria.controlador.ControladorGestionTurnos;
import com.veterinaria.vista.VentanaGestionTurnos;
// Importar todos los DAOs necesarios
// Si no existen, reemplaza con los nombres de tus clases reales.
// import com.veterinaria.modelo.TurnoDAO3;
// import com.veterinaria.modelo.PropietarioDAO;
// import com.veterinaria.modelo.MascotaDAO;
// import com.veterinaria.modelo.TipoConsultaDAO;

public class FactoriaServicios {

    // --- 1. DECLARACI√ìN DE TODOS LOS DAOs ---
    private final TurnoDAO3 turnoDAO;
    private final PropietarioDAO propietarioDAO;
    private final MascotaDAO mascotaDAO;
    private final TipoConsultaDAO tipoConsultaDAO;

    // --- 2. DECLARACI√ìN DE GESTORES ---
    private final GestorTurno3 gestorTurno;
    private final GestorGestionTurnos gestorGestionTurnos;
    // El gestorModificacionTurnos NO debe ser un campo aqu√≠ si solo se usa en el Controlador.
    // Lo borramos para evitar confusiones.

    public FactoriaServicios() {
        // A. CREACI√ìN DE TODOS LOS DAOs
        this.turnoDAO = new TurnoDAO3();
        this.propietarioDAO = new PropietarioDAO();
        this.mascotaDAO = new MascotaDAO();
        this.tipoConsultaDAO = new TipoConsultaDAO();

        // B. CREACI√ìN DE GESTORES (RESPEANDO LAS FIRMAS)

        // 1. GestorTurno3 (Asume 1 DAO)
        this.gestorTurno = new GestorTurno3(turnoDAO);

        // 2. GestorGestionTurnos (Asume 3 DAOs, basado en image_a41426.png)
        // **CORRECCI√ìN CLAVE:** Si tu GestorGestionTurnos es quien transporta la Factor√≠a (la 'c√°psula'), debe recibir 4 par√°metros.
        this.gestorGestionTurnos = new GestorGestionTurnos(
                turnoDAO,
                propietarioDAO,
                mascotaDAO,
                tipoConsultaDAO,
                this // üõë 4¬∫ par√°metro: Referencia a la propia Factor√≠a (this)
        );


    }

    // --- M√âTODOS P√öBLICOS (GETTERS) ---

    public GestorTurno3 getGestorTurno() {
        return gestorTurno;
    }

    public GestorGestionTurnos getGestorGestionTurnos() {
        return gestorGestionTurnos;
    }

    // --- M√âTODO ENSAMBLADOR DEL CONTROLADOR (LA SOLUCI√ìN A LA INYECCI√ìN) ---
    public ControladorGestionTurnos crearControladorGestionTurnos(VentanaGestionTurnos vista) {

        // üõë Ensamblamos el Controlador con los 6 par√°metros que necesita
        return new ControladorGestionTurnos(
                // 1. GestorGestionTurnos: Ya inicializado arriba.
                gestorGestionTurnos,

                // 2. Vista
                vista,

                // 3, 4, 5, 6. Los 4 DAOs que el Controlador usa para crear el GestorModificacionTurnos
                turnoDAO,
                propietarioDAO,
                mascotaDAO,
                tipoConsultaDAO
        );
    }
}*/

package com.veterinaria.modelo;

import com.veterinaria.controlador.ControladorGestionTurnos;
import com.veterinaria.vista.VentanaGestionTurnos;



public class FactoriaServicios {

    // --- DECLARACI√ìN DE TODOS LOS DAOs ---

    private final TurnoDAO3 turnoDAO;
    private final PropietarioDAO propietarioDAO;
    private final MascotaDAO mascotaDAO;
    private final TipoConsultaDAO tipoConsultaDAO;
    private final TipoPracticaDAO tipoPracticaDAO;
    private final ConsultaService consultaService;
    private final ConsultaDAO consultaDAO;
    private final HistoriaClinicaService historiaClinicaService;

    // --- 2. DECLARACI√ìN DE GESTORES ---

    private final GestorTurno3 gestorTurno;          // üõë Para Registro (
    private final GestorGestionTurnos gestorGestionTurnos; // Para Gesti√≥n

    public FactoriaServicios() {
        this.consultaService = new ConsultaService();
        // A. CREACI√ìN DE TODOS LOS DAOs
        this.consultaDAO=new ConsultaDAO();
        this.turnoDAO = new TurnoDAO3();
        this.propietarioDAO = new PropietarioDAO();
        this.mascotaDAO = new MascotaDAO();
        this.tipoConsultaDAO = new TipoConsultaDAO();
        this.tipoPracticaDAO=new TipoPracticaDAO();
        this.historiaClinicaService = new HistoriaClinicaService(consultaDAO,
                propietarioDAO,mascotaDAO,tipoPracticaDAO);

        // CREACI√ìN DE GESTORES (Inyecci√≥n de dependencias)

        // GESTOR DE REGISTRO DE TURNOS

        this.gestorTurno = new GestorTurno3(turnoDAO);

        // GESTOR DE GESTI√ìN DE TURNOS

        this.gestorGestionTurnos = new GestorGestionTurnos(
                turnoDAO,
                propietarioDAO,
                mascotaDAO,
                tipoConsultaDAO,
                this // referencia a la factoria
        );
    }

    // --- M√âTODOS P√öBLICOS (GETTERS) ---

    // Lo usa VentanaPrincipal2 para Registro
    public GestorTurno3 getGestorTurno() {
        return gestorTurno;
    }

    // Lo usa VentanaPrincipal2 para Gesti√≥n
    public GestorGestionTurnos getGestorGestionTurnos() {
        return gestorGestionTurnos;
    }

    // --- M√âTODO ENSAMBLADOR DEL CONTROLADOR DE GESTI√ìN (PARA EL LANZADOR) ---
    // Este m√©todo es usado por LanzadorGestionTurnos.lanzar()
    public ControladorGestionTurnos crearControladorGestionTurnos(VentanaGestionTurnos vista) {

        // Ensambla el Controlador con los 6 argumentos necesarios
        return new ControladorGestionTurnos(
                // 1. GestorGestionTurnos: Ya inicializado arriba.
                gestorGestionTurnos,
                vista,
                turnoDAO,
                propietarioDAO,
                mascotaDAO,
                tipoConsultaDAO
        );
    }

    public ConsultaService getConsultaService() {
        return consultaService;
    }

    public HistoriaClinicaService getHistoriaClinicaService() { // ‚¨ÖÔ∏è Aseg√∫rate de que exista
        return historiaClinicaService;
    }

}
